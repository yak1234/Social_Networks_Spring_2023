{
  "hash": "269605678ccf5588425b3cb9057d1ec7",
  "result": {
    "markdown": "---\ntitle: \"Final Project Proposal\"\nauthor: \"Yakub Rabiutheen\"\ndesription: \"Something to describe what I did\"\ndate: \"05/21/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n- Final Project\n---\n\n\n\n1. Identify an existing data set or collect your own data. Provide a thorough description of the network data and the protocols used to collect and code it. The information provided should be sufficient to allow someone to recreate your network data from the original source. \n\n\n\n\n\n\nFirst we will invoke the ipumsr library to read in the data. The read_ipums_micro() function takes two arguments: the DDI file and the data file. The DDI file is an XML file that contains metadata about the data. The data file is a gzipped file that contains the data itself. Both files are located in the posts/ directory.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ipumsr)\nddi <- read_ipums_ddi(\"posts/cps_00003.xml\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in custom_check_file_exists(ddi_file): Could not find file, check the path in argument 'file':\n  posts/cps_00003.xml\n```\n:::\n\n```{.r .cell-code}\ncps_data <- read_ipums_micro(ddi, data_file = \"cps_00003.dat.gz\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in check_if_lower_vars_ignored(ddi, lower_vars): object 'ddi' not found\n```\n:::\n:::\n\n\n\n\n\n##Scraping IPUMS to get Industry Codes\n\nNow I will scrape the IPUMS website to also get the Codes for each Industry for my IND column. \n\n\n::: {.cell}\n\n```{.markdown .cell-code}\nlibrary(rvest)\nlibrary(dplyr)\n\n# Base URL\nbase_url <- \"https://cps.ipums.org\"\n\n# Page URL\npage_url <- \"https://cps.ipums.org/cps-action/variables/IND#codes_section\"\n\n# Read the HTML of the base page\nmain_page <- read_html(page_url)\n\n# Find the links for different years\nlinks <- main_page %>%\n  html_nodes(\"a[href*='codes']\") %>%\n  html_attr(\"href\")\n\n# Correct the links (remove the 'https://cps.ipums.org' if it exists)\nlinks <- gsub(\"https://cps.ipums.org\", \"\", links)\n\n# Create the full URLs\nurls <- paste0(base_url, links)\n\n# Initialize a list to hold the scraped data\ndata_list <- list()\n\n# Loop through the URLs\nfor (url in urls) {\n  # Read the HTML of the page\n  page <- read_html(url)\n  \n  # Scrape the codes and descriptions\n  dt <- page %>%\n    html_nodes(\"dt\") %>%\n    html_text()\n  dd <- page %>%\n    html_nodes(\"dd\") %>%\n    html_text()\n  \n  # Combine the codes and descriptions into a data frame and add it to the list\n  data_list[[url]] <- data.frame(Code = dt, Description = dd, stringsAsFactors = FALSE)\n}\n\n# Combine all the data frames into a single data frame\nindustry_codes <- bind_rows(data_list)\n\n# View the data\nprint(industry_codes)\n##Save Occupational Codes as CSV\nwrite.csv(industry_codes, file = \"industry_codes.csv\")\n```\n:::\n\n\n\nNow let's read in Occupational Codes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindustry_codes<-read.csv(\"industry_codes.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in file(file, \"rt\"): cannot open file 'industry_codes.csv': No such\nfile or directory\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in file(file, \"rt\"): cannot open the connection\n```\n:::\n:::\n\n\n\n\nAdding Occupational Codes to IND Column\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data$IND_1_Description <- industry_codes$Description[match(cps_data$IND_1, industry_codes$Code)]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'industry_codes' not found\n```\n:::\n\n```{.r .cell-code}\ncps_data$IND_1 <- NULL\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cps_data$IND_1 <- NULL: object 'cps_data' not found\n```\n:::\n\n```{.r .cell-code}\n# Replace numerical codes with descriptions in IND_2 column\ncps_data$IND_2_Description <- industry_codes$Description[match(cps_data$IND_2, industry_codes$Code)]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'industry_codes' not found\n```\n:::\n\n```{.r .cell-code}\ncps_data$IND_2 <- NULL\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cps_data$IND_2 <- NULL: object 'cps_data' not found\n```\n:::\n:::\n\n\n\n\n\nAdding Race Labels to the Race Column\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels <- c(\"100\", \"200\", \"300\", \"650\", \"651\", \"652\", \"700\", \"801\", \"802\", \"803\", \"804\", \"805\", \"806\", \"807\", \"808\", \"809\", \"810\", \"811\", \"812\", \"813\", \"814\", \"815\", \"816\", \"817\", \"818\", \"819\", \"820\", \"830\")\nlabels <- c(\"White\", \"Black\", \"American Indian/Aleut/Eskimo\", \"Asian or Pacific Islander\", \"Asian only\", \"Hawaiian/Pacific Islander only\", \"Other (single) race, n.e.c.\", \"White-Black\", \"White-American Indian\", \"White-Asian\", \"White-Hawaiian/Pacific Islander\", \"Black-American Indian\", \"Black-Asian\", \"Black-Hawaiian/Pacific Islander\", \"American Indian-Asian\", \"Asian-Hawaiian/Pacific Islander\", \"White-Black-American Indian\", \"White-Black-Asian\", \"White-American Indian-Asian\", \"White-Asian-Hawaiian/Pacific Islander\", \"White-Black-American Indian-Asian\", \"American Indian-Hawaiian/Pacific Islander\", \"White-Black--Hawaiian/Pacific Islander\", \"White-American Indian-Hawaiian/Pacific Islander\", \"Black-American Indian-Asian\", \"White-American Indian-Asian-Hawaiian/Pacific Islander\", \"Two or three races, unspecified\", \"Four or five races, unspecified\")\n\n# Convert RACE_1 to a factor\ncps_data$RACE_1 <- factor(cps_data$RACE_1, levels = levels, labels = labels)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in factor(cps_data$RACE_1, levels = levels, labels = labels): object 'cps_data' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert \"SEX_1\" to a factor with labels\ncps_data$SEX_1 <- factor(cps_data$SEX_1, labels = c(\"Male\", \"Female\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in factor(cps_data$SEX_1, labels = c(\"Male\", \"Female\")): object 'cps_data' not found\n```\n:::\n\n```{.r .cell-code}\ncps_data$SEX_1 <- as.character(cps_data$SEX_1)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'cps_data' not found\n```\n:::\n:::\n\n\n\n\nAdding Country labels to Country Column\nPlease note that the Census definees Country different from Race. Also, that the Census has historically asked about Country of Origin in different ways. For example, in 1970, the Census asked about Country of Origin for the first time. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the labels for each country code\ncountry_value <- c(10000, 10500, 11000, 11500, 12090, 15000, 16010, 19900, 20000, 21010, 21020, 21030, 21040, 21050, 21060, 21070, 21090, 25000, 26010, 26020, 26030, 26043, 26044, 26054, 26055, 26060, 26091, 30005, 30010, 30015, 30020, 30025, 30030, 30040, 30050, 30060, 30065, 30090, 40000, 40100, 40400, 40500, 41000, 41100, 41300, 41400, 41410, 42000, 42100, 42500, 42600, 43300, 43400, 43600, 43610, 43800, 45000, 45200, 45212, 45213, 45300, 45400, 45500, 45540, 45600, 45700, 46100, 46200, 46500, 46530, 46590, 49900, 50000, 50010, 50040, 50100, 50200, 50220, 51100, 51200, 51300, 51400, 51500, 51600, 51700, 51800, 52000, 52100, 52110, 52130, 52140, 52200, 53200, 53400, 53420, 53500, 53700, 54000, 54100, 54200, 54700, 59900, 60010, 60012, 60014, 60023, 60031, 60044, 60045, 60094, 60099, 70010, 70020, 71000, 71021, 96000)\ncountry_label <- c( \"American Samoa\", \"Guam\", \"Puerto Rico\", \"U.S. Virgin Islands\", \"U.S. outlying areas, n.s.\", \"Canada\", \"Bermuda\", \"North America, n.s.\", \"Mexico\", \"Belize/British Honduras\", \"Costa Rica\", \"El Salvador\", \"Guatemala\", \"Honduras\", \"Nicaragua\", \"Panama\", \"Central America, n.s.\", \"Cuba\", \"Dominican Republic\", \"Haiti\", \"Jamaica\", \"Bahamas\", \"Barbados\", \"Dominica\", \"Grenada\", \"Trinidad and Tobago\", \"Caribbean, n.s.\", \"Argentina\", \"Bolivia\", \"Brazil\", \"Chile\", \"Colombia\", \"Ecuador\", \"Guyana/British Guiana\", \"Peru\", \"Uruguay\", \"Venezuela\", \"South America, n.s.\", \"Denmark\", \"Finland\", \"Norway\", \"Sweden\", \"England\", \"Scotland\", \"United Kingdom, n.s.\", \"Ireland\", \"Northern Ireland\", \"Belgium\", \"France\", \"Netherlands\", \"Switzerland\", \"Greece\", \"Italy\", \"Portugal\", \"Azores\", \"Spain\", \"Austria\", \"Czechoslavakia\", \"Slovakia\", \"Czech Republic\", \"Germany\", \"Hungary\", \"Poland\", \"Armenia\", \"Romania\", \"Yugoslavia\", \"Latvia\", \"Lithuania\", \"Other USSR/Russia\", \"Ukraine\", \"USSR, n.s.\", \"Europe, n.s.\", \"China\", \"Hong Kong\", \"Taiwan\", \"Japan\", \"Korea\", \"South Korea\", \"Cambodia\", \"Indonesia\", \"Laos\", \"Malaysia\", \"Philippines\", \"Singapore\", \"Thailand\", \"Vietnam\", \"Afghanistan\", \"India\", \"Bangladesh\", \"Burma\", \"Pakistan\", \"Iran\", \"Iraq\", \"Israel/Palestine\", \"Palestine\", \"Jordan\", \"Lebanon\", \"Saudi Arabia\", \"Syria\", \"Turkey\", \"Middle East, n.s.\", \"Asia, n.e.c./n.s.\", \"Northern Africa\", \"Egypt/United Arab Rep.\", \"Morocco\", \"Ghana\", \"Nigeria\", \"Ethiopia\", \"Kenya\", \"South Africa (Union of)\", \"Africa, n.s./n.e.c.\", \"Australia\", \"New Zealand\", \"Pacific Islands\", \"Fiji\", \"Other, n.e.c. and unknown\")\n\ncps_data$COUNTRY_1 <- factor(cps_data$COUNTRY_1, levels = country_value, labels = country_label)           \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in factor(cps_data$COUNTRY_1, levels = country_value, labels = country_label): object 'cps_data' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:ipumsr':\n\n    %<-%\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\nfiltered_cps_data <- na.omit(cps_data[, c(\"COUNTRY_1\", \"IND_1_Description\")])\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in na.omit(cps_data[, c(\"COUNTRY_1\", \"IND_1_Description\")]): object 'cps_data' not found\n```\n:::\n\n```{.r .cell-code}\ng_country <- graph_from_data_frame(filtered_cps_data, directed = FALSE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame(d): object 'filtered_cps_data' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"Graph Summary:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGraph Summary:\n```\n:::\n\n```{.r .cell-code}\ncat(\"Number of Nodes:\", vcount(g_country), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"Number of Edges:\", ecount(g_country), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"Diameter:\", diameter(g_country), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Edge list for Industry and Race\nedge_matrix_race <- cps_data[, c(\"IND_1_Description\", \"RACE_1\")]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'cps_data' not found\n```\n:::\n\n```{.r .cell-code}\n# Edge list for Industry and Sex\nedge_matrix_sex <- cps_data[, c(\"IND_1_Description\", \"SEX_1\")]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'cps_data' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove NAs from edge_matrix_race\nedge_matrix_race <- na.omit(edge_matrix_race)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in na.omit(edge_matrix_race): object 'edge_matrix_race' not found\n```\n:::\n\n```{.r .cell-code}\n# Remove NAs from edge_matrix_sex\nedge_matrix_sex <- na.omit(edge_matrix_sex)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in na.omit(edge_matrix_sex): object 'edge_matrix_sex' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\ng_race <- graph_from_edgelist(as.matrix(edge_matrix_race), directed = FALSE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.matrix(edge_matrix_race): object 'edge_matrix_race' not found\n```\n:::\n\n```{.r .cell-code}\ng_sex <- graph_from_edgelist(as.matrix(edge_matrix_sex), directed = FALSE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.matrix(edge_matrix_sex): object 'edge_matrix_sex' not found\n```\n:::\n\n```{.r .cell-code}\n#g_country <- graph_from_edgelist(as.matrix(edge_matrix_country), directed = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\nnum_nodes_race <- vcount(g_race)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\nnum_edges_race <- ecount(g_race)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\nnum_nodes_sex <- vcount(g_sex)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n\n```{.r .cell-code}\nnum_edges_sex <- ecount(g_sex)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n\n```{.r .cell-code}\nnum_nodes_country <- vcount(g_country)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\nnum_edges_country <- ecount(g_country)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\n# Diameter\ndiameter_race <- diameter(g_race)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\ndiameter_sex <- diameter(g_sex)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n\n```{.r .cell-code}\ndiameter_country <- diameter(g_country)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\n# Degree centrality\ndegree_centrality_race <- degree(g_race)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\ndegree_centrality_sex <- degree(g_sex)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n\n```{.r .cell-code}\ndegree_centrality_country <- degree(g_country)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\n# Betweenness centrality\nbetweenness_centrality_race <- betweenness(g_race)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\nbetweenness_centrality_sex <- betweenness(g_sex)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n\n```{.r .cell-code}\nbetweenness_centrality_country <- betweenness(g_country)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\n# Eigenvector centrality\neigenvector_centrality_race <- eigen_centrality(g_race)$vector\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\neigenvector_centrality_sex <- eigen_centrality(g_sex)$vector\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n\n```{.r .cell-code}\neigenvector_centrality_country <- eigen_centrality(g_country)$vector\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"Graph Summary:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGraph Summary:\n```\n:::\n\n```{.r .cell-code}\n# Summary for g_race\ncat(\"g_race\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ng_race\n```\n:::\n\n```{.r .cell-code}\ncat(\"Number of Nodes:\", vcount(g_race), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"Number of Edges:\", ecount(g_race), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"Diameter:\", diameter(g_race), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\n# Summary for g_country\ncat(\"g_country\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ng_country\n```\n:::\n\n```{.r .cell-code}\ncat(\"Number of Nodes:\", vcount(g_country), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"Number of Edges:\", ecount(g_country), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"Diameter:\", diameter(g_country), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\n# Summary for g_sex\ncat(\"g_sex\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ng_sex\n```\n:::\n\n```{.r .cell-code}\ncat(\"Number of Nodes:\", vcount(g_sex), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"Number of Edges:\", ecount(g_sex), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"Diameter:\", diameter(g_sex), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n##Answers to Question 1.\n\na.Where is the data set from, and what is being measured? Was the original data in matrix, edgelist or affiliation network format?\n\n\nThe data that I will be using is Data from  Current Population Survey provided by Integrated Public Use Microdata Series(IPUMS) which was created by University Of Minessota.\n\nThe Current Population Survey originally comes from the Bureau of Labor,and IPUMS is a data aggregator that harmonized the CPS  Data creating consistent variables across years to facilitate longitudinal analysis.\n\n\nb.Is this network a sample or does it represent the universe of cases? If a sample, is the sample adequate/random/suitable?\n\nThe Data is  a sample collected by the Bureau of Labor Statistics. The sample is adequate and suitable because it is a random sample of the population.\n\nAlso, the CPS dataset is designed to answer questions regarding Labor Force Demographics.\n\n\nc. What constitutes a vertex/node in these data? What is the level of analysis (person, organization, etc.)? How many nodes are in the data set?\n\nThe level are analaysis are people. Each node represents a person responding to the survey. The edges represent a connection of industry to their self reported race, gender or country of origin in the Census.\n\n\n\nIn terms of the the numbers of nodes, it varies  by each graph.\n\ng_race\nNumber of Nodes: 567 \nNumber of Edges: 2058407 \nDiameter: 3 \ng_country\nNumber of Nodes: 296 \nNumber of Edges: 1548 \nDiameter: 7 \ng_sex\nNumber of Nodes: 541 \nNumber of Edges: 2058407 \nDiameter: 4 \n\n\n\nd.What constitutes a tie in these data? Is the tie weighted or unweighted? If weighted, what is the range of tie values? What is the tie measuring, and is the measure adequate?\n\nThe Tie that this Data is measuring is the tie between the Industry a Person is in and the Demographic variables that a person has such as Race, Coutnry of Origin and  Gender.\n\n\n\ne.\nWere any transformations used (e.g., thresholds, one-mode projection) to create final network data used in analysis?\n\nThere were no transformations suhc as thresholds or one-mode projection used to create the final network data used in analysis.\n\n\n\n\n\n\n##Answers to Question 2\n\n2.\n\nProvide additional descriptive statistics about your network data. The information provided should be sufficient to allow someone to understand the distinctive features of your network data. Please include a substantive discussion or interpretation of the meaning of each of these features – this is not merely a statistical report. In addition to basic information about network size and range of tie values (provided above), look at the following:\nnumber of components\n(if not fully connected) proportion of nodes in giant component and proportion of unconnected nodes/singletons (if any)\n(fully connected graphs or subgraphs only) Network diameter (the length of the longest geodesic in the network). Maybe distribution of network geodesics.\ngraph density\naverage node degree and degree distribution\n\n\n\n\n\na. number of components\n\n::: {.cell}\n\n```{.r .cell-code}\ncomponents_sex <- decompose.graph(g_sex)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n\n```{.r .cell-code}\ncomponents_race <- decompose.graph(g_race)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\ncomponents_country <- decompose.graph(g_country)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\n# Number of Components\ncat(\"Number of Components:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of Components:\n```\n:::\n\n```{.r .cell-code}\ncat(\"g_sex:\", length(components_sex), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"g_sex:\", length(components_sex), \"\\n\"): object 'components_sex' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"g_race:\", length(components_race), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"g_race:\", length(components_race), \"\\n\"): object 'components_race' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"g_country:\", length(components_country), \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"g_country:\", length(components_country), \"\\n\\n\"): object 'components_country' not found\n```\n:::\n:::\n\nb.(if not fully connected) proportion of nodes in giant component and proportion of unconnected nodes/singletons (if any)\n\n::: {.cell}\n\n```{.r .cell-code}\ng_sex_simple <- simplify(g_sex)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n\n```{.r .cell-code}\ng_race_simple <- simplify(g_race)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\ng_country_simple <- simplify(g_country)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\n# Detect communities\ncommunities_sex <- cluster_fast_greedy(g_sex_simple)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex_simple' not found\n```\n:::\n\n```{.r .cell-code}\ncommunities_race <- cluster_fast_greedy(g_race_simple)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race_simple' not found\n```\n:::\n\n```{.r .cell-code}\ncommunities_country <- cluster_fast_greedy(g_country_simple)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country_simple' not found\n```\n:::\n\n```{.r .cell-code}\nsizes_sex <- sizes(communities_sex)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in membership(communities): object 'communities_sex' not found\n```\n:::\n\n```{.r .cell-code}\nsizes_race <- sizes(communities_race)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in membership(communities): object 'communities_race' not found\n```\n:::\n\n```{.r .cell-code}\nsizes_country <- sizes(communities_country)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in membership(communities): object 'communities_country' not found\n```\n:::\n\n```{.r .cell-code}\nprop_giant_comp_sex <- max(sizes_sex) / vcount(g_sex_simple)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'sizes_sex' not found\n```\n:::\n\n```{.r .cell-code}\nprop_giant_comp_race <- max(sizes_race) / vcount(g_race_simple)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'sizes_race' not found\n```\n:::\n\n```{.r .cell-code}\nprop_giant_comp_country <- max(sizes_country) / vcount(g_country_simple)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'sizes_country' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"Proportion of Nodes in Giant Component:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nProportion of Nodes in Giant Component:\n```\n:::\n\n```{.r .cell-code}\ncat(\"g_sex:\", prop_giant_comp_sex, \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"g_sex:\", prop_giant_comp_sex, \"\\n\"): object 'prop_giant_comp_sex' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"g_race:\", prop_giant_comp_race, \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"g_race:\", prop_giant_comp_race, \"\\n\"): object 'prop_giant_comp_race' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"g_country:\", prop_giant_comp_country, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"g_country:\", prop_giant_comp_country, \"\\n\\n\"): object 'prop_giant_comp_country' not found\n```\n:::\n:::\n\n\nC.(fully connected graphs or subgraphs only) Network diameter (the length of the longest geodesic in the network). Maybe distribution of network geodesics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##Diameter\ncat(\"Diameter:\", diameter(g_race), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"Diameter:\", diameter(g_country), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"Diameter:\", diameter(g_sex), \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n:::\n\n\n\n\n\nD.graph density\n\n::: {.cell}\n\n```{.r .cell-code}\n# Network Density\ndensity_sex <- edge_density(g_sex)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n\n```{.r .cell-code}\ndensity_race <- edge_density(g_race)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\ndensity_country <- edge_density(g_country)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"Network Density:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNetwork Density:\n```\n:::\n\n```{.r .cell-code}\ncat(\"g_sex:\", density_sex, \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"g_sex:\", density_sex, \"\\n\"): object 'density_sex' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"g_race:\", density_race, \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"g_race:\", density_race, \"\\n\"): object 'density_race' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"g_country:\", density_country, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"g_country:\", density_country, \"\\n\\n\"): object 'density_country' not found\n```\n:::\n:::\n\nNetwork Density:\ng_sex: 14.09192 \ng_race: 12.82808 \ng_country: 0.03545579 \n\n\n\ne.average node degree and degree distribution\n\n::: {.cell}\n\n```{.r .cell-code}\navg_degree_sex <- mean(degree(g_sex))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n\n```{.r .cell-code}\navg_degree_race <- mean(degree(g_race))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\navg_degree_country <- mean(degree(g_country))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"Average Node Degree:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAverage Node Degree:\n```\n:::\n\n```{.r .cell-code}\ncat(\"g_sex:\", avg_degree_sex, \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"g_sex:\", avg_degree_sex, \"\\n\"): object 'avg_degree_sex' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"g_race:\", avg_degree_race, \"\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"g_race:\", avg_degree_race, \"\\n\"): object 'avg_degree_race' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"g_country:\", avg_degree_country, \"\\n\\n\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"g_country:\", avg_degree_country, \"\\n\\n\"): object 'avg_degree_country' not found\n```\n:::\n:::\n\nAverage Node Degree:\ng_sex: 7609.638 \ng_race: 7260.695 \ng_country: 10.45946 \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"Degree Distribution Summary:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDegree Distribution Summary:\n```\n:::\n\n```{.r .cell-code}\ncat(\"g_sex:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ng_sex:\n```\n:::\n\n```{.r .cell-code}\nsummary(degree_distribution(g_sex))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_sex' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"\\ng_race:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\ng_race:\n```\n:::\n\n```{.r .cell-code}\nsummary(degree_distribution(g_race))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\ncat(\"\\ng_country:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\ng_country:\n```\n:::\n\n```{.r .cell-code}\nsummary(degree_distribution(g_country))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_country' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\nsubset_vertices <- sample(V(g_race), size = 20)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\n# Get the labels of the selected races\nlabels <- V(g_race)$RACE_1[subset_vertices]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\n# Create a subgraph containing only the subset of vertices and their incident edges\nsubgraph <- induced_subgraph(g_race, subset_vertices)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\n# Plot the subgraph with vertex labels and edges\nplot(subgraph, vertex.label = labels, edge.arrow.size = 0.5)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in induced_subgraph(graph, vids): Not a graph object\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwhite_edges <- edge_matrix_race[edge_matrix_race$RACE_1 == \"White\", ]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'edge_matrix_race' not found\n```\n:::\n\n```{.r .cell-code}\nindustry_counts <- table(white_edges$IND_1_Description)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in table(white_edges$IND_1_Description): object 'white_edges' not found\n```\n:::\n\n```{.r .cell-code}\nsorted_counts <- sort(industry_counts, decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in sort(industry_counts, decreasing = TRUE): object 'industry_counts' not found\n```\n:::\n\n```{.r .cell-code}\ntop_10_counts <- head(sorted_counts, 10)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(sorted_counts, 10): object 'sorted_counts' not found\n```\n:::\n\n```{.r .cell-code}\n# Print the top 10 industries with the highest counts\nprint(top_10_counts)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in print(top_10_counts): object 'top_10_counts' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the graph object from the white_edges\nwhite_graph <- graph_from_data_frame(d = white_edges, directed = FALSE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame(d): object 'white_edges' not found\n```\n:::\n\n```{.r .cell-code}\n# Calculate the degree centrality\nWwhite_degree_centrality <- degree(white_graph)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'white_graph' not found\n```\n:::\n\n```{.r .cell-code}\n# Exclude the \"White\" vertex from the top 10 vertices\ntop_10_indices <- order(Wwhite_degree_centrality, decreasing = TRUE)[-1][1:10]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in order(Wwhite_degree_centrality, decreasing = TRUE): object 'Wwhite_degree_centrality' not found\n```\n:::\n\n```{.r .cell-code}\n# Get the names of the vertices corresponding to the top 10 indices (excluding \"White\")\ntop_10_vertices <- V(white_graph)$name[top_10_indices]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'white_graph' not found\n```\n:::\n\n```{.r .cell-code}\n# Print the top 10 vertices with the highest degree centrality (excluding \"White\")\nprint(top_10_vertices)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in print(top_10_vertices): object 'top_10_vertices' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assuming g_race is the graph object representing the race network\n\n# Perform community detection using the Louvain algorithm\ncommunity <- cluster_louvain(g_race)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\n# Get the membership of each vertex in the detected communities\nmembership <- community$membership\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'community' not found\n```\n:::\n\n```{.r .cell-code}\n# Get the labels of the vertices\nlabels <- V(g_race)$name\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'g_race' not found\n```\n:::\n\n```{.r .cell-code}\n# Create a summary table with vertex label, index, and corresponding community/role assignment\nsummary_table <- data.frame(Vertex = 1:length(membership), Label = labels, Community = membership)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame.default(x[[i]], optional = TRUE): cannot coerce class '\"function\"' to a data.frame\n```\n:::\n\n```{.r .cell-code}\n# Print the summary table for g_race\nprint(\"g_race Community Summary:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"g_race Community Summary:\"\n```\n:::\n\n```{.r .cell-code}\nprint(summary_table)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in print(summary_table): object 'summary_table' not found\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}